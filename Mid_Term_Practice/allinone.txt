==================  Deffie Hellman ==================

####   server.py

import socket

def power(a,b,c):
    return pow(a,b,c)

def server():
    P,G,Xa = 353 , 3 , 97
    Ya = power(G,Xa,P)
    print(f"Public Key of Server : {Ya}")
    socket_server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    socket_server.bind(('localhost',8080))
    socket_server.listen(1)
    
    client_socket , client_addr = socket_server.accept()
    print(f"Connection from {client_addr}")
    client_socket.send(f"{P},{G},{Ya}".encode())
    print("Public Key Sent")
    Yb = int(client_socket.recv(1024).decode())
    print(f"Public Key of Client : {Yb}")
    Ka = power(Yb,Xa,P)
    print(f"Shared Key : {Ka}")

if __name__ == '__main__':
    server() 

####   client.py

import socket

def power(a,b,c):
    return pow(a,b,c)

def client():
    socket_client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    socket_client.connect(('localhost',8080))
    P,G,Ya = map(int,socket_client.recv(1024).decode().split(','))
    print(f"Public Key of Server : {Ya}")
    Xb = 233
    Yb = power(G,Xb,P)
    print(f"Public Key of Client : {Yb}")
    socket_client.send(f"{Yb}".encode())
    print("Public Key Sent")
    Kb = power(Ya,Xb,P)
    print(f"Shared Key : {Kb}")

if __name__ == '__main__':
    client()


========================= El_Gamal ===========================

#### server.py

import socket
import random
import json

def power(a, b, c):
    return pow(a, b, c)

def key_generate(q):
    return random.randint(2, q - 1)

def decrypt(q, key, C1, C2):
    temp = power(C1, key, q) 
    msg = ""
    for i in range(0, len(C2)):
        msg += chr(int(C2[i] // temp))
    return msg

def server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080)) 
    server_socket.listen(1)

    q = random.randint(pow(10, 20), pow(10, 50)) 
    g = random.randint(2, q)  # E1
    # key = key_generate(q)  # Private key
    key = random.randint(2, q - 1) # Private key
    Ya = power(g, key, q)  # E2
    print(f"q: {q} \n g: {g} \n Ya : {Ya} \n key: {key}")
    client_socket, client_addr = server_socket.accept()
    print(f"Connection from {client_addr}")
    client_socket.send(f"{q},{g},{Ya}".encode())
    print("Public Key Sent")
    # Receive encrypted data
    data = json.loads(client_socket.recv(1024).decode())
    C1, C2 = data
    print(f"C1: {C1} \n C2: {C2}")
    msg = decrypt(q, key, C1, C2)
    print(f"Message: {msg}")
    client_socket.close()
    server_socket.close()

if __name__ == '__main__':
    server()


#### client.py

import socket
import json

def power(a, b, c):
    return pow(a, b, c)

def encrypt(q, g, Ya, msg):
    # k = random.randint(2, q - 1)  # Choose random k
    k = 1111
    c2 = []
    c1 = power(g, k, q)
    temp = power(Ya, k, q)
    for i in range(0, len(msg)):
        c2.append(temp * ord(msg[i]))
    return c1, c2

def client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))
    q, g, Ya = map(int, client_socket.recv(1024).decode().split(','))
    print(f"El_Gamal Public Key: \n q: {q} \n g: {g} \n Ya: {Ya}")
    msg = input("Enter the message:")
    C1, C2 = encrypt(q, g, Ya, msg)
    data = json.dumps([C1, C2])
    client_socket.send(data.encode())
    print("Message Sent")
    client_socket.close()

if __name__ == '__main__':
    client()


=================================== RSA =================================

#### server.py

import socket
import random
import json

def power(a, b, c):
    return pow(a, b, c)

def gcd(a, b):
    return a if b == 0 else gcd(b, a % b)

def key_generate(phin):
    e = random.randint(2, phin - 1)
    while gcd(phin, e) != 1:
        e = random.randint(2, phin - 1)
    return e

def decrypt(encrypted, d, n):
    msg = ""
    for i in range(len(encrypted)):
        m = power(encrypted[i], d, n)
        msg += chr(m)
    return msg

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def generate_prime(lower, upper):
    while True:
        num = random.randint(lower, upper)
        if is_prime(num):
            return num

def server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))
    server_socket.listen(1)
    print(f"Yeah , I am Client : Hahahaha")
    # p = generate_prime(pow(10, 3), pow(10, 5))
    # q = generate_prime(pow(10, 3), pow(10, 5))
    p = int(input("Enter the value of p : "))
    q = int(input("Enter the value of q : "))
    n = p * q
    phin = (p - 1) * (q - 1)
    # e = key_generate(phin)
    e = int(input("Enther the value of e : "))
    d = power(e, -1, phin)
    print(f"The value of d (private key using inverse mod of e) : {d}")
    client_socket, client_addr = server_socket.accept()
    print(f"Public Key : \n e : {e} \n n : {n}")
    client_socket.send(json.dumps([e, n]).encode())
    # Receive the encrypted message.
    encrypted = json.loads(client_socket.recv(1024).decode())
    msg = decrypt(encrypted, d, n)
    print(f"Message : {msg}")
    client_socket.close()
    server_socket.close()

if __name__ == '__main__':
    server()



#### client.py

import socket
import json

def power(a, b, c):
    return pow(a, b, c)

def encrypt(msg, e, n):
    encry = []
    for i in range(len(msg)):
        encry.append(power(ord(msg[i]), e, n))
    return encry

def client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))
    print(f"Yeah , I am Client : Hahahaha")
    # Receive the public key.
    e, n = json.loads(client_socket.recv(1024).decode())
    print(f"Public Key Received: \n e: {e} \n n: {n}")
    msg = input("Enter the message: ")
    encrypted = encrypt(msg, e, n)
    print(f"Encrypted Text: {encrypted}")
    # Send the encrypted message as JSON.
    client_socket.send(json.dumps(encrypted).encode())
    print("Message Sent")
    client_socket.close()

if __name__ == '__main__':
    client()


======================= Classical ==============================

========================= Caesar ================================
#### server.py
import socket
import json

def server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))
    server_socket.listen(1)
    print("Yeah I am Server : Hahahaha")

    client_socket, client_addr = server_socket.accept()
    print(f"Client is Connected at: {client_addr}")

    shift = int(client_socket.recv(1024).decode())  # Receive shift value
    encrypted = client_socket.recv(1024).decode()  # Receive encrypted text

    msg = ""
    shift = -shift  # Reverse the shift for decryption
    for char in encrypted:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')  # Correct base
            msg += chr((ord(char) - base + shift) % 26 + base)
        else:
            msg += char  # Keep non-alphabet characters unchanged

    print(f"Message is: {msg}")

    client_socket.close()
    server_socket.close()

if __name__ == '__main__':
    server()

#### client.py

import socket
import json

def client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))
    print("Yeah I am Client : Hahahaha")

    msg = input("Enter the message (to encrypt using Caesar cipher): ")
    shift = int(input("Enter the shift in number for shifting: "))

    client_socket.send(f"{shift}".encode())  # Send shift value

    result = ""
    for char in msg:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')  # Correct base
            result += chr((ord(char) - base + shift) % 26 + base)
        else:
            result += char  # Keep non-alphabet characters unchanged

    print(f"Encrypted Text: {result}")
    client_socket.send(result.encode())  # Send encrypted text as a string

    client_socket.close()

if __name__ == '__main__':
    client()

============================ PlayFair Cipher ======================

#### helper.py
def generate_matrix(key):
    key = "".join(dict.fromkeys(key.upper().replace("J", "I") + "ABCDEFGHIKLMNOPQRSTUVWXYZ"))
    return [list(key[i:i+5]) for i in range(0, 25, 5)]

def find_position(matrix, letter):
    for r, row in enumerate(matrix):
        if letter in row:
            return r, row.index(letter)

def playfair_encrypt(text, key):
    text = text.upper().replace("J", "I").replace(" ", "")
    if len(text) % 2: text += "X"
    matrix = generate_matrix(key)
    encrypted = ""
    
    for i in range(0, len(text), 2):
        r1, c1 = find_position(matrix, text[i])
        r2, c2 = find_position(matrix, text[i+1])
        if r1 == r2:
            encrypted += matrix[r1][(c1+1) % 5] + matrix[r2][(c2+1) % 5]
        elif c1 == c2:
            encrypted += matrix[(r1+1) % 5][c1] + matrix[(r2+1) % 5][c2]
        else:
            encrypted += matrix[r1][c2] + matrix[r2][c1]
    
    return encrypted

def playfair_decrypt(text, key):
    matrix = generate_matrix(key)
    decrypted = ""

    for i in range(0, len(text), 2):
        r1, c1 = find_position(matrix, text[i])
        r2, c2 = find_position(matrix, text[i+1])
        if r1 == r2:
            decrypted += matrix[r1][(c1-1) % 5] + matrix[r2][(c2-1) % 5]
        elif c1 == c2:
            decrypted += matrix[(r1-1) % 5][c1] + matrix[(r2-1) % 5][c2]
        else:
            decrypted += matrix[r1][c2] + matrix[r2][c1]
            
    if decrypted[-1] == "X":
        decrypted = decrypted[:-1]

    return decrypted

#### server.py

import socket
from helper import playfair_decrypt  # Import Playfair functions

def server():
    s = socket.socket()
    s.bind(('localhost', 8080))
    s.listen(1)
    c, _ = s.accept()
    key = c.recv(1024).decode()
    encrypted = c.recv(1024).decode()
    print(f"Encrypted: {encrypted}")
    print(f"Decrypted: {playfair_decrypt(encrypted, key)}")
    c.close()
    s.close()

server()

#### clinet.py

import socket
from helper import playfair_encrypt  # Import Playfair functions

def client():
    s = socket.socket()
    s.connect(('localhost', 8080))
    key = input("Enter the Key : ")
    msg = input("Enter message: ")
    encrypted = playfair_encrypt(msg, key)
    print(f"Encrypted: {encrypted}")
    s.send(key.encode())
    s.send(encrypted.encode())
    s.close()

client()


============================ Rail Fence ==========================

#### server.py
import socket

def rail_fence_decrypt(cipher, rails):
    if rails <= 1:
        return cipher
    
    # Step 1: Create a zigzag pattern
    pattern, rail, direction = [], 0, 1
    for _ in cipher:
        pattern.append(rail)
        rail += direction
        if rail == rails - 1 or rail == 0:
            direction *= -1

    # Step 2: Count characters per rail
    rail_counts = [pattern.count(r) for r in range(rails)]
    
    # Step 3: Fill rails with encrypted text
    rails_text, index = [], 0
    for count in rail_counts:
        rails_text.append(list(cipher[index:index + count]))
        index += count

    # Step 4: Read in correct order
    return "".join(rails_text[r].pop(0) for r in pattern)

def server():
    s = socket.socket()
    s.bind(('localhost', 8080))
    s.listen(1)
    print("Server is running, waiting for client...")
    c, _ = s.accept()
    key = int(c.recv(1024).decode())  # Receive key first
    encrypted = c.recv(1024).decode()  # Receive encrypted message
    print(f"Encrypted: {encrypted}")
    print(f"Decrypted: {rail_fence_decrypt(encrypted, key)}")
    c.close()
    s.close()

server()

#### client.py

import socket

def rail_fence_encrypt(text, rails):
    if rails <= 1:
        return text

    fence, rail, direction = [''] * rails, 0, 1
    for char in text:
        fence[rail] += char
        rail += direction
        if rail == rails - 1 or rail == 0:
            direction *= -1

    return ''.join(fence)

def client():
    s = socket.socket()
    s.connect(('localhost', 8080))
    key = int(input("Enter the Key (1-5): "))
    msg = input("Enter message: ")
    encrypted = rail_fence_encrypt(msg, key)
    print(f"Encrypted: {encrypted}")
    s.send(str(key).encode())  # Send key first
    s.send(encrypted.encode())  # Send encrypted message
    s.close()

client()

======================== Row Transposition =====================
#### server.py

import socket

def row_transposition_decrypt(cipher, key):
    cols = len(key)
    rows = len(cipher) // cols
    order = sorted(list(enumerate(key)), key=lambda x: x[1])
    matrix = [[''] * cols for _ in range(rows)]
    index = 0
    for col_index, _ in order:
        for r in range(rows):
            matrix[r][col_index] = cipher[index]
            index += 1
    plaintext = ''.join(''.join(row) for row in matrix)
    return plaintext.rstrip("X")

def server():
    s = socket.socket()
    s.bind(('localhost', 8080))
    s.listen(1)
    c, _ = s.accept()
    key = c.recv(1024).decode()
    encrypted = c.recv(1024).decode()
    print(f"Encrypted: {encrypted}")
    print(f"Decrypted: {row_transposition_decrypt(encrypted, key)}")
    c.close()
    s.close()

server()


#### client.py

import socket

def row_transposition_encrypt(text, key):
    cols = len(key)
    rows = len(text) // cols
    if len(text) % cols != 0:
        rows += 1
    text += "X" * (rows * cols - len(text))
    matrix = [list(text[i * cols:(i + 1) * cols]) for i in range(rows)]
    order = sorted(list(enumerate(key)), key=lambda x: x[1])
    ciphertext = ""
    for index, _ in order:
        for row in matrix:
            ciphertext += row[index]
    return ciphertext

def client():
    s = socket.socket()
    s.connect(('localhost', 8080))
    key = input("Enter the Key : ")
    msg = input("Enter message: ")
    encrypted = row_transposition_encrypt(msg, key)
    print(f"Encrypted: {encrypted}")
    s.send(key.encode())
    s.send(encrypted.encode())
    s.close()

client()


====================== Vigener =======================
#### server.py
import socket

def vigenere_decrypt(cipher, key):
    cipher = cipher.upper()
    key = key.upper()
    result = ""
    key_length = len(key)
    for i, char in enumerate(cipher):
        if char.isalpha():
            shift = ord(key[i % key_length]) - ord('A')
            result += chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))
        else:
            result += char
    return result

def server():
    s = socket.socket()
    s.bind(('localhost', 8080))
    s.listen(1)
    c, _ = s.accept()
    key = c.recv(1024).decode()
    encrypted = c.recv(1024).decode()
    print(f"Encrypted: {encrypted}")
    print(f"Decrypted: {vigenere_decrypt(encrypted, key)}")
    c.close()
    s.close()

server()


#### client.py
import socket

def vigenere_encrypt(text, key):
    text = text.upper()
    key = key.upper()
    result = ""
    key_length = len(key)
    for i, char in enumerate(text):
        if char.isalpha():
            shift = ord(key[i % key_length]) - ord('A')
            result += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))
        else:
            result += char
    return result

def client():
    s = socket.socket()
    s.connect(('localhost', 8080))
    key = input("Enter the Key : ")
    msg = input("Enter message: ")
    encrypted = vigenere_encrypt(msg, key)
    print(f"Encrypted: {encrypted}")
    s.send(key.encode())
    s.send(encrypted.encode())
    s.close()

client()

========================= Hill ==========================
#### server.py

import socket
import numpy as np

def mod_inverse_matrix(matrix, mod=26):
    try:
        det = int(round(np.linalg.det(matrix)))  # Compute determinant
        det_inv = pow(det, -1, mod)              # Modular inverse of determinant
        adjugate = np.round(np.linalg.inv(matrix) * det).astype(int)
        return (det_inv * adjugate % mod).astype(int)
    except ValueError:  # Raised if modular inverse doesn't exist
        print("Inverse is not possible")
        return None

def decrypt(cipher_text, key_matrix):
    key_inv = mod_inverse_matrix(key_matrix)
    if key_inv is None:
        return ""
    # Convert ciphertext letters to numbers (A=0,...,Z=25)
    cipher_nums = [ord(char) - ord('A') for char in cipher_text]
    cipher_matrix = np.array(cipher_nums).reshape(-1, 3)
    decrypted_nums = (np.dot(cipher_matrix, key_inv.T) % 26).astype(int)
    return ''.join(chr(num + ord('A')) for num in decrypted_nums.flatten())

def server():
    s = socket.socket()
    s.bind(('localhost', 8080))
    s.listen(1)
    conn, _ = s.accept()

    key_matrix = np.array(eval(conn.recv(1024).decode()))
    cipher_text = conn.recv(1024).decode()

    print(f"Encrypted: {cipher_text}")
    decrypted_msg = decrypt(cipher_text, key_matrix)
    if decrypted_msg:
        print(f"Decrypted: {decrypted_msg}")
    conn.close()
    s.close()

server()

#### client.py

import socket
import numpy as np

def text_to_numbers(text):
    return [ord(char) - ord('A') for char in text]

def encrypt(msg, key_matrix):
    msg_nums = text_to_numbers(msg)
    msg_nums += [0] * ((3 - len(msg_nums) % 3) % 3)  # Padding if needed
    msg_matrix = np.array(msg_nums).reshape(-1, 3)
    # Multiply by the transpose of key matrix
    cipher_nums = (np.dot(msg_matrix, key_matrix.T) % 26).flatten()
    return ''.join(chr(num + ord('A')) for num in cipher_nums)

def get_key_matrix():
    while True:
        key = input("Enter 9-letter key (A-Z): ").upper()
        if len(key) == 9 and key.isalpha():
            return np.array([ord(c) - ord('A') for c in key]).reshape(3, 3)
        print("Invalid key! Enter exactly 9 uppercase letters.")

def client():
    s = socket.socket()
    s.connect(('localhost', 8080))

    key_matrix = get_key_matrix()
    msg = input("Enter message (UPPERCASE, length multiple of 3): ").upper()

    encrypted_msg = encrypt(msg, key_matrix)
    print(f"Encrypted: {encrypted_msg}")

    s.send(str(key_matrix.tolist()).encode())
    s.send(encrypted_msg.encode())
    s.close()

client()

====================== DES =======================
#### server.py
import socket
from Crypto.Cipher import DES
import json

# Function to decrypt using DES
def des_decrypt(ciphertext, key):
    cipher = DES.new(key, DES.MODE_ECB)
    decrypted_text = cipher.decrypt(bytes.fromhex(ciphertext)).decode().strip()
    return decrypted_text

def server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))
    server_socket.listen(1)

    print("Server is waiting for connection...")
    client_socket, client_addr = server_socket.accept()
    print(f"Client connected from: {client_addr}")

    # Receive key and encrypted message
    data = json.loads(client_socket.recv(1024).decode())
    key = data["key"].encode()
    encrypted_msg = data["message"]

    print(f"Received Encrypted: {encrypted_msg}")
    
    decrypted_msg = des_decrypt(encrypted_msg, key)
    print(f"Decrypted Message: {decrypted_msg}")

    client_socket.close()
    server_socket.close()

if __name__ == "__main__":
    server()


#### client.py
import socket
from Crypto.Cipher import DES
import json

# Function to pad text to be a multiple of 8 bytes
def pad(text):
    while len(text) % 8 != 0:
        text += " "
    return text

# Function to encrypt using DES
def des_encrypt(plaintext, key):
    cipher = DES.new(key, DES.MODE_ECB)
    padded_text = pad(plaintext)
    encrypted_text = cipher.encrypt(padded_text.encode()).hex()
    return encrypted_text

def client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))

    key = input("Enter 8-character key (must be exactly 8 characters): ").encode()
    message = input("Enter the message to encrypt: ")

    encrypted_msg = des_encrypt(message, key)

    print(f"Encrypted Text: {encrypted_msg}")

    data = json.dumps({"key": key.decode(), "message": encrypted_msg})
    client_socket.send(data.encode())

    client_socket.close()

if __name__ == "__main__":
    client()

====================== AES ========================
#### server.py
import socket
import json
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# Function to decrypt using AES
def aes_decrypt(ciphertext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    decrypted_text = unpad(cipher.decrypt(bytes.fromhex(ciphertext)), AES.block_size).decode()
    return decrypted_text

def server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))
    server_socket.listen(1)

    print("Server is waiting for connection...")
    client_socket, client_addr = server_socket.accept()
    print(f"Client connected from: {client_addr}")

    # Receive key and encrypted message
    data = json.loads(client_socket.recv(1024).decode())
    key = data["key"].encode()
    encrypted_msg = data["message"]

    print(f"Received Encrypted: {encrypted_msg}")

    decrypted_msg = aes_decrypt(encrypted_msg, key)
    print(f"Decrypted Message: {decrypted_msg}")

    client_socket.close()
    server_socket.close()

if __name__ == "__main__":
    server()


#### client.py
import socket
import json
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

# Function to encrypt using AES
def aes_encrypt(plaintext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    padded_text = pad(plaintext.encode(), AES.block_size)
    encrypted_text = cipher.encrypt(padded_text).hex()
    return encrypted_text

def client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))

    key = input("Enter 16-character key (must be exactly 16 characters): ").encode()
    message = input("Enter the message to encrypt: ")

    encrypted_msg = aes_encrypt(message, key)

    print(f"Encrypted Text: {encrypted_msg}")

    data = json.dumps({"key": key.decode(), "message": encrypted_msg})
    client_socket.send(data.encode())

    client_socket.close()

if __name__ == "__main__":
    client()
