##### DiffieHellman_KeyEx

## dhkx_server.py


# Alice

import socket

def power(a,b,p):
    return pow(a,b,p) # a^b mod p

def server():
    # P : prime number
    # G : primitive root
    # a : private key
    # x = G^a mod P

    P, G , a = 23 , 9 , 3
    print(f"The value of P is : {P}\n The value of its primitive root G is : {G}\n The value of Alice's private ket is : {a}")

    x = power(G,a,P) # x = G^a mod P
    print(f"The generated key value for Alice is X : {x}")

    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    server_socket.bind(('localhost',8080))
    server_socket.listen(1)

    print(f"Waiting for client to connect ....")
    client_socket , client_addr = server_socket.accept()
    print(f"Client {client_addr} connected")

    client_socket.send(f"{G} {P}".encode())

    y = int(client_socket.recv(1024).decode())
    print(f"Public Key received by server from the client : {y}")

    ka = power(G,y,P)
    print(f"The received private key ka : {ka}")

    client_socket.send(f"{x}".encode())

    client_socket.close()


if __name__ == "__main__" :
    server()


## dhkx_client.py

# BOB

import socket

def power(a,b,c):
    return pow(a,b,c)

def client():
    client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    client_socket.connect(('localhost',8080))

    G , P = map(int,client_socket.recv(1024).decode().split())
    b = 4

    y = power(G, b, P)  # y = G^b mod P
    print(f"The generated key for client (BOB) y : {y}")

    client_socket.send(f"{y}".encode())

    x = int(client_socket.recv(1024).decode())
    print(f"Public Key received by client from the server : {x}")

    kb = power(G,x,P)
    print(f"The received private key ka : {kb}")

    # client_socket.send(f"{y}".encode())

    client_socket.close()


if __name__ == "__main__" :
    client()


##### DiffieHellman_MIMA

## mima.py

import socket

def power(a,b,c):
    return pow(a,b,c)

def mima():
    print(f"Waiting to client to connect....")

    # Attacker to server (actual) as a client
    att_server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    att_server_socket.connect(('localhost',8080))

    # Attacker to client (actual) as a server
    att_client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    att_client_socket.bind(('localhost',8081))
    att_client_socket.listen(1)

    client_socket , client_addr = att_client_socket.accept()
    print(f"Client {client_addr} connected.")

    # P_G msg from server
    P_G_msg = att_server_socket.recv(1024).decode()
    print(f"Intercepted P and G from the server : {P_G_msg}")
    client_socket.send(P_G_msg.encode())
    P,G = map(int,P_G_msg.split())

    # Attacker's Dummy values

    a_prime = 6 # Dummy private key for server
    b_prime = 5 # Dummy private ket for client

    x_prime = power(G,a_prime,P) # att_to_client
    y_prime = power(G,b_prime,P) # att_to_server

    # Shared to server
    y = int(client_socket.recv(1024).decode())
    print(f"Intercepted Client's public key (y) : {y}")
    att_server_socket.send(f"{y_prime}".encode())
    print(f"Attacker's public key for server : {y_prime}")

    # Shared to client
    x = int(att_server_socket.recv(1024).decode())
    print(f"Intercepted Server's public key (x) : {x}")
    client_socket.send(f"{x_prime}".encode())
    print(f"Attacker's public key for client : {x_prime}")

    ka = power(x_prime,b_prime,P) # att_new_key_for_client
    kb = power(y_prime,a_prime,P) # attt_new_key_for_server

    att_server_socket.close()
    client_socket.close()

if __name__ == '__main__':
    mima()



## mima_server.py

# Alice

import socket

def power(a,b,p):
    return pow(a,b,p) # a^b mod p

def server():
    # P : prime number
    # G : primitive root
    # a : private key
    # x = G^a mod P

    P, G , a = 23 , 9 , 3
    print(f"The value of P is : {P}\n The value of its primitive root G is : {G}\n The value of Alice's private ket is : {a}")

    x = power(G,a,P) # x = G^a mod P
    print(f"The generated key value for Alice is X : {x}")

    server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    server_socket.bind(('localhost',8080))
    server_socket.listen(1)

    print(f"Waiting for client to connect ....")
    client_socket , client_addr = server_socket.accept()
    print(f"Client {client_addr} connected")

    client_socket.send(f"{G} {P}".encode())

    y = int(client_socket.recv(1024).decode())
    print(f"Public Key received by server from the client : {y}")

    ka = power(y, a, P)  # Instead of power(G, y, P)
    print(f"The received private key ka : {ka}")

    client_socket.send(f"{x}".encode())

    client_socket.close()


if __name__ == "__main__" :
    server()



## mima_client.py

# BOB

import socket

def power(a,b,c):
    return pow(a,b,c)

def client():
    client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    client_socket.connect(('localhost',8081))

    G , P = map(int,client_socket.recv(1024).decode().split())
    b = 4

    y = power(G, b, P)  # y = G^b mod P
    print(f"The generated key for client (BOB) y : {y}")

    client_socket.send(f"{y}".encode())

    x = int(client_socket.recv(1024).decode())
    print(f"Public Key received by client from the server : {x}")

    kb = power(x, b, P)  # Instead of power(G, x, P)
    print(f"The received private key ka : {kb}")

    # client_socket.send(f"{y}".encode())

    client_socket.close()


if __name__ == "__main__" :
    client()



##### El_gamal

## el_gamal_server.py

import socket
import random
# from math import pow

# El_Gamal Key generation
def gen_key(q):
    key = random.randint(pow(10,20),q)
    while gcd(q, key) != 1:
        key = random.randint(pow(10, 20), q)
    return key

# GCD
def gcd(a,b):
    if a < b:
        return gcd(b,a)
    elif a % b == 0:
        return b
    else:
        return gcd(b,a % b)


# modulo
def power(a,b,c):
    return pow(a,b,c)

# def power(a, b, c):
#     x = 1
#     y = a
#     while b > 0:
#         if b % 2 == 0:
#             x = (x * y) % c
#         y = (y * y) % c
#         b = int(b / 2)
#     return x % c

# Decryption

def decryption(C2,C1,key,q):
    pt = []
    x = power(C1,key,q)
    for i in range(0,len(C2)):
        # pt.append(chr(C2[i]*power(x,q-2,q)))
        pt.append(chr(int(C2[i] / x)))
    return ''.join(pt)


server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_socket.bind(('localhost',12345))
server_socket.listen(1)

print(f"Server is waiting for connection...")

# Generate EL_Gamal parameters

q = random.randint(pow(10,20),pow(10,50))
g = random.randint(2,q)
key = gen_key(q)
h = power(g,key,q)

print(f"Generated El_Gamal Parameters : ")
print(f"g (prime) : {q}")
print(f"g (generator : primitive root) : {g}")
print(f"Private key : {key}")
print(f"Public key : {h}")

while True:
    conn , addr = server_socket.accept()
    print(f"Connected By {addr}")

    # Send public parameters to client
    conn.send(f"{q},{g},{h}".encode())
    print(f"Send public parameters to client : q = {q} , g = {g} , h = {h}")

    data = conn.recv(1024).decode().split(',')

    C2 = [int(x) for x in data[:-1]]
    C1 = int(data[-1])

    print(f"Received Encrypted Message : {C2}")
    print(f"Received C1 : {C1}")

    # Decryption
    decrypted_msg = decryption(C2,C1,key,q)

    print(f"Decrypted Message is  : {decrypted_msg}")

    conn.close()
    break



## el_gamal_client.py

import socket
# from math import pow

def power(a,b,c):
    return pow(a,b,c)

# def power(a, b, c):
#     x = 1
#     y = a
#     while b > 0:
#         if b % 2 == 0:
#             x = (x * y) % c
#         y = (y * y) % c
#         b = int(b / 2)
#     return x % c

# Encryption
def encrypt(msg,q,h,g):
    C2 = []
    k = 3
    C1 = power(g,k,q)
    temp = power(h,k,q)
    for i in range(0,len(msg)):
        C2.append(msg[i])
    for i in range(0,len(msg)):
        C2[i] = temp * ord(C2[i])

    return C2,C1



client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
client_socket.connect(('localhost',12345))

print(f"Connected to server")

data = client_socket.recv(1024).decode().split(',')
q , g , h = int(data[0]) , int(data[1]) , int(data[2])
print(f"Received public parameters from server:")
print(f"q (prime): {q}")
print(f"g (generator): {g}")
print(f"h (public key): {h}")

# Input a message

msg = input("Enter the message to encrypt : ")

# Encryption part
# here (C2,C1) Here  C2 = msg * h^k mod q and C1 = g^k mod q

C2 , C1 = encrypt(msg,q,h,g)

print(f"Original Message : {msg}")
print(f"Encrypted Message : {C2}")
print(f"Generator : {C1}")

encrypted_msg = ','.join(map(str,C2)) + f',{C1}'
client_socket.send(encrypted_msg.encode())

print(f"Encrypted Message send to server for decryption")

client_socket.close()





